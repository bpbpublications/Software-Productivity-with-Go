package main

import (
    "fmt"
    "sync"
)

func worker(id int, input <-chan int, output chan<- int, wg *sync.WaitGroup) {
    defer wg.Done()
    for num := range input {
        result := num * 2 // Some processing
        output <- result
    }
}

func main() {
    const numWorkers = 3
    const numTasks = 10

    input := make(chan int)
    output := make(chan int)

    var wg sync.WaitGroup

    // Fan-Out phase
    for i := 0; i < numWorkers; i++ {
        wg.Add(1)
        go worker(i, input, output, &wg)
    }

    // Fan-In phase
    go func() {
        wg.Wait()
        close(output)
    }()

    // Send tasks to workers
    for i := 0; i < numTasks; i++ {
        input <- i
    }

    close(input)

    // Collect and process results
    for result := range output {
        fmt.Printf("Received result: %d\n", result)
    }
}

